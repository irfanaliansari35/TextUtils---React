{"version":3,"sources":["components/Navbar.js","components/TextForm.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","mode","to","title","type","id","onClick","toggleMode","htmlFor","TextForm","useState","text","setText","style","color","heading","value","onChange","event","target","backgroundColor","rows","newText","toUpperCase","showAlert","toLowerCase","_","startCase","navigator","clipboard","writeText","split","join","length","Alert","word","alert","role","msg","App","setMode","setAlert","message","setTimeout","document","body","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.4cc13efa.chunk.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { a } from 'react-router-dom'\r\n\r\nexport default function Navbar(props) {\r\n  return (\r\n    <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n      <div className=\"container-fluid\">\r\n        <a className=\"navbar-brand\" to=\"/\">{props.title}</a>\r\n        <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n          <span className=\"navbar-toggler-icon\"></span>\r\n        </button>\r\n        <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n          <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n            {/* <li className=\"nav-item\">\r\n              <a className=\"nav-a active\" aria-current=\"page\" href=\"/\">Home</a>\r\n            </li> */}\r\n            {/* <li className=\"nav-item\">\r\n              <a className=\"nav-a\" to=\"/about\">About</a>\r\n            </li> */}\r\n\r\n          </ul>\r\n          {/* <form className=\"d-flex\">\r\n              <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\" />\r\n              <button className=\"btn btn-primary\" type=\"submit\">Search</button>\r\n            </form> */}\r\n          <div className={`form-check form-switch text-${props.mode==='light'?'dark' : 'light' }`}>\r\n            <input className=\"form-check-input\" onClick={props.toggleMode} type=\"checkbox\" id=\"flexSwitchCheckDefault\" />\r\n            <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">{`Enable ${props.mode==='light'?'dark' : 'light' } Mode`}</label>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </nav>\r\n  )\r\n}\r\n\r\nNavbar.propTypes = {\r\n  title: PropTypes.string\r\n}\r\n","import React, { useState } from 'react'\r\nimport _ from \"lodash\";\r\n\r\nexport default function TextForm(props) {\r\n\r\n    const [text, setText] = useState(\"\");\r\n    const handleChange = (event) => {\r\n        setText(event.target.value);\r\n    }\r\n\r\n    const handleUpClick = () => {\r\n        let newText = text.toUpperCase();\r\n        setText(newText);\r\n        props.showAlert(\"Converted to Uppercase!\",\"success\");\r\n    }\r\n\r\n    const handleLoClick = () => {\r\n        let newText = text.toLowerCase();\r\n        setText(newText);\r\n        props.showAlert(\"Converted to Lowercase!\",\"success\");\r\n    }\r\n    const handleScClick = () => {\r\n        let newText = _.startCase(text);\r\n        setText(newText);\r\n        props.showAlert(\"Converted to Capitalize!\",\"success\");\r\n        \r\n    }\r\n\r\n    const handleClear = () => {\r\n         setText(\"\");\r\n        props.showAlert(\"Text cleared\",\"success\");\r\n\r\n         }\r\n\r\n    const handleCopy = () => {\r\n        navigator.clipboard.writeText(text);\r\n        props.showAlert(\"Copied to Clipboard!\", \"success\");\r\n    }\r\n\r\n    const handleExtraSpaces = () => {\r\n        let newText = text.split(/[ ]+/);\r\n        setText(newText.join(\" \"));\r\n        props.showAlert(\"Extra spaces are removed\", \"success\");\r\n    }\r\n\r\n\r\n    return (\r\n        <>\r\n            <div className=\"container\" style={{color : props.mode==='dark'?'white' : 'black'}}>\r\n                <h2>{props.heading}</h2>\r\n                <div className=\"mb-3\">\r\n                    <textarea className=\"form-control\" value={text} onChange={handleChange} style={{backgroundColor : props.mode==='dark'?'grey' : 'white',color : props.mode==='dark'?'white' : 'black'}} id=\"myBox\" rows=\"7\"></textarea>\r\n                    <button className=\"btn btn-primary my-3 mx-2\" onClick={handleUpClick}> Convert to Uppercase</button>\r\n                    <button className=\"btn btn-primary my-3 mx-2\" onClick={handleLoClick}> Convert to Lowercase</button>\r\n                    <button className=\"btn btn-primary my-3 mx-2\" onClick={handleScClick}> Capitalize</button>\r\n                    <button className=\"btn btn-primary my-3 mx-2\" onClick={handleClear}> Clear</button>\r\n                    <button className=\"btn btn-primary mx-1 my-1\" onClick={handleCopy}>Copy Text</button>\r\n                    <button className=\"btn btn-primary mx-1 my-1\" onClick={handleExtraSpaces}>Remove Extra Spaces</button>\r\n\r\n                </div>\r\n            </div>\r\n            <div className=\"container\" style={{color : props.mode==='dark'?'white' : 'black'}}>\r\n                <h2>Your Text Summary</h2>\r\n                <p>{text.split(\" \").length} words and {text.length} characters</p>\r\n                <p>{0.008 * text.split(\" \").length} Minutes to read </p>\r\n                <h3>Preview</h3>\r\n                <p>{text.length>0 ? text : \"Enter something in the textbox above to preview here\"}</p>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport _ from 'lodash'\r\nexport default function Alert(props) {\r\n\r\n    const capitalize = (word)=>{\r\n        return _.startCase(word);\r\n    }\r\n    return (\r\n        props.alert && <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n            <strong>{capitalize(props.alert.type)}</strong> {props.alert.msg}\r\n\r\n        </div>\r\n    );\r\n}\r\n","\nimport './App.css';\nimport About from './components/About';\nimport Navbar from './components/Navbar';\nimport TextForm from './components/TextForm';\nimport Alert from './components/Alert';\nimport React, { useState } from 'react';\n// import {\n//   BrowserRouter as Router,\n//   Switch,\n//   Route\n// } from \"react-router-dom\";\n\n\n\nfunction App() {\n\n  const [mode, setMode] = useState('light');\n  const [alert, setAlert] = useState(null);\n\n  const toggleMode = () => {\n    if (mode === 'light') {\n      setMode('dark');\n      document.body.style.backgroundColor = '#042743';\n      showAlert(\"Dark mode has been enabled\", \"success\");\n    }\n    else {\n      setMode('light')\n      document.body.style.backgroundColor = 'white';\n      showAlert(\"Light mode has been enabled\", \"success\");\n\n    }\n  }\n\n  const showAlert = (message, type) => {\n    setAlert({\n      msg: message,\n      type: type\n    });\n    setTimeout(() => {\n      setAlert(null)\n    }, 2000);\n  }\n  return (\n    <>\n    {/* <Router> */}\n      <Navbar title=\"TextUtils\" mode={mode} toggleMode={toggleMode} />\n      <Alert alert={alert} />\n      <div className=\"container my-4\">\n        {/* <Switch> */}\n          {/* <Route exact path=\"/about\">\n            <About mode={mode} /> */}\n          {/* </Route> */}\n          {/* <Route exact path=\"/\"> */}\n            <TextForm heading=\"Enter Text To Analyze\" showAlert={showAlert} mode={mode} />\n          {/* </Route> */}\n        {/* </Switch> */}\n\n      </div>\n      {/* </Router> */}\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  \n    <App />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}